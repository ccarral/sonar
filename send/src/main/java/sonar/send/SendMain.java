/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sonar.send;

import java.io.*;
import java.nio.*;
import java.nio.charset.*;
import sonar.minimodem.*;
import sonar.socket.*;

public class SendMain {
  public static void main(String[] args) {
    try {

      MinimodemReceiver rx = new MinimodemReceiver(BaudMode.BELL202);
      MinimodemTransmitter tx = new MinimodemTransmitter(BaudMode.BELL202);

      BufferedTransmitter transmitter = new BufferedTransmitter(tx);
      BufferedReceiver receiver = new BufferedReceiver(rx);

      SonarSocket socket = new SonarSocket(receiver, transmitter);

      System.out.println("Leyendo archivo '" + args[0] + "'");
      File file = new File(args[0]);

      FileInputStream fis = new FileInputStream(file);
      BufferedInputStream bufferedInputStream = new BufferedInputStream(fis);

      if (!file.exists()) {
        System.err.printf("El archivo '%s' no existe.", args[0]);
      }

      Packet syncPacket = new Packet(666, 999);

      // Los primeros 16 bytes corresponden al nombre.
      byte[] nombre = new byte[16];
      SendMain.truncateUtf8(args[0], nombre);

      for (int i = 0; i < 16; i++) {
        syncPacket.write(nombre[i]);
      }

      // Formula: (tamaño/128).redondearHaciaArriba() * DELAY_MS *2
      int b = 0;
      while ((b = fis.read()) != -1) {
        syncPacket.write((byte) b);
      }

      // Escribe un paquete, si no se recibe respuesta en cierto tiempo, manda error.
      Packet recibido = socket.writeLockstep(syncPacket, SonarSocket.DELAY_MS * 2 + 5000);

      System.out.println("Recibido paquete de sincronización");

    } catch (Exception e) {
      System.err.println("El programa falló por los siguientes motivos:");
      e.printStackTrace();
    }
  }

  public static int truncateUtf8(String input, byte[] output) {

    ByteBuffer outBuf = ByteBuffer.wrap(output);
    CharBuffer inBuf = CharBuffer.wrap(input.toCharArray());

    Charset utf8 = Charset.forName("UTF-8");
    utf8.newEncoder().encode(inBuf, outBuf, true);
    return outBuf.position();
  }
}
